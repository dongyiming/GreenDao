package com.example.android_db_biz.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.android_db_biz.vo.MenuInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU_INFO".
*/
public class MenuInfoDao extends AbstractDao<MenuInfo, Long> {

    public static final String TABLENAME = "MENU_INFO";

    /**
     * Properties of entity MenuInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MenuCode = new Property(1, String.class, "menuCode", false, "MENU_CODE");
        public final static Property MenuName = new Property(2, String.class, "menuName", false, "MENU_NAME");
        public final static Property MenuDesc = new Property(3, String.class, "menuDesc", false, "MENU_DESC");
        public final static Property MenuType = new Property(4, int.class, "menuType", false, "MENU_TYPE");
        public final static Property CreateTime = new Property(5, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(6, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public MenuInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MenuInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MENU_CODE\" TEXT," + // 1: menuCode
                "\"MENU_NAME\" TEXT," + // 2: menuName
                "\"MENU_DESC\" TEXT," + // 3: menuDesc
                "\"MENU_TYPE\" INTEGER NOT NULL ," + // 4: menuType
                "\"CREATE_TIME\" TEXT," + // 5: createTime
                "\"UPDATE_TIME\" TEXT);"); // 6: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MenuInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String menuCode = entity.getMenuCode();
        if (menuCode != null) {
            stmt.bindString(2, menuCode);
        }
 
        String menuName = entity.getMenuName();
        if (menuName != null) {
            stmt.bindString(3, menuName);
        }
 
        String menuDesc = entity.getMenuDesc();
        if (menuDesc != null) {
            stmt.bindString(4, menuDesc);
        }
        stmt.bindLong(5, entity.getMenuType());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(7, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MenuInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String menuCode = entity.getMenuCode();
        if (menuCode != null) {
            stmt.bindString(2, menuCode);
        }
 
        String menuName = entity.getMenuName();
        if (menuName != null) {
            stmt.bindString(3, menuName);
        }
 
        String menuDesc = entity.getMenuDesc();
        if (menuDesc != null) {
            stmt.bindString(4, menuDesc);
        }
        stmt.bindLong(5, entity.getMenuType());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(7, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MenuInfo readEntity(Cursor cursor, int offset) {
        MenuInfo entity = new MenuInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // menuCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // menuName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // menuDesc
            cursor.getInt(offset + 4), // menuType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MenuInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMenuCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMenuName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMenuDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMenuType(cursor.getInt(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MenuInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MenuInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MenuInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
